{
  "hash": "031f0b756f4e626e0dccc71aed728a06",
  "result": {
    "markdown": "---\naliases:\n  - data-wrangling.html\n---\n\n# Data Wrangling\n\n\n\n\n\n> ... in which we explore the typical data analysis workflow with the tidyverse, wrangle different kinds of data and learn about factors.\n\n\n{{< youtube oCYn2pHfizg >}}\n\n\n\n> **Note**:\\\n> I try to be vocal about what the code does in plain English while I type it and learning the \"translations\" of symbols and keywords can help you, too. After a while, programming can feel a lot more like having a conversation with your digital assistant or a helpful friend. The boundary between human languages and computer languages is more blurry than you might think.\n\nRight after the setup-chunk, where we specify common code execution\noptions like showing the code (`echo`) or hiding messages and warnings,\nthe first thing we usually do at the top of a new analysis is load the\npackages we are going to used.\nIf I later find that I need some more, I come back here and add\nit to the list, so that people reading my code can see straight away,\nwhat they have to install in order for them to run the code themselves.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/loading-packages_74d8ca718c972298d4d6a66271262fdd'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## A Data Analysis Workflow\n\nWe are getting close to importing our very first dataset from a file into R.\nGenerally, this is the first thing that needs to happen with any data analysis and we will cover it today.\nThe data I provided is already pretty tidy so we will start with that and build some visualizations.\nThe communicate-part is also covered, because we are working in Rmarkdown after all,\nwhich is designed to communicate our findings.\nNext week we will also have a look at some less tidy data,\nbut not before having defined what \"tidy data\" is.\n\n![Figure from @wickhamDataScienceImport2017.](images/workflow-wickham.png)\n\n## Reading Data with `readr`\n\n<aside>\n\n<a href=\"https://readr.tidyverse.org/\"> ![The readr logo](images/readr.png) </a>\n\n</aside>\n\nThe package responsible for loading data in the tidyverse is called `readr`, so we start by loading the whole tidyverse.\n\nNote, that in general, we could also load just the `readr` package with `library(readr)`, but we need the rest of the tidyverse later on anyways.\nThere is also the option to not load a package at all but rather only use one function from a package by prefixing the function with the package name and two colons (`::`) Like so:\n`readr::read_csv(\"...\")`.\n\nWithout further ado, let's download the data for today.\nIn fact, there are multiple ways to go about this.\nWe could download the whole course folder from GitHub by following the link\nthat says \"View book source\"\nin the left sidebar (or the pancake-menu in mobile view) and then using the download button\non GitHub:\n\n![](images/download_repo.png)\n\nThe data is all in a folder called `data` and organized into sub-folders\nwith the lecture number.\nSo everything you need for today can be found in folder `02`.\n\nOn GitHub, we can also download individual files,\nbut for plain text files you need to remember one extra step.\nIf you have already clicked on the file in GitHub and can\nsee it's content, it is tempting to copy and paste the link\nfrom the browser bar and use R's `download.file` function.\nHowever, this is just the link to the part of the website\nwhere GitHub shows the file, not a link to the actual file.\nWe can get the correct link by clicking on the **Raw** button:\n\n![](images/github-raw.png)\n\nThen we can use this to download the file:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-2_6ff3f384d557e5b9a14e5678adb8294d'}\n\n```{.r .cell-code}\ndownload.file(\"https://raw.githubusercontent.com/jmbuhr/dataintro/main/data/02/gapminder.csv\", \"example-download.csv\")\n```\n:::\n\n\nIf you look into the source for this lecture you will find that\nI set the chunk option `eval=FALSE`, meaning the code will not but run.\nI don't want to download the file again every time I make a change to\nthe course script.\n\nA common error I see people having with `download.file` is trying to download\na file into e.g. a folder called `data` without first creating said folder.\nIf you get one of those `No such file or directory` errors, this is the most\nlikely cause.\n\n-   read gapminder data (csv)\n-   read csv also works with url\n    -   but you probably also want a local copy\n    -   write_csv and friends\n-   `View` and ctrl+click\n\nWith our data downloaded, we can make use of RStudio's autocompletion\nto complete the file-path to our data inside of quotation marks.\nWe can trigger it explicitly with `ctrl+space` or `tab`.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-3_249b478bed76a69905ebeca336c2fab8'}\n\n```{.r .cell-code}\ngapminder <- read_csv(\"data/02/gapminder.csv\")\n```\n:::\n\n\n`readr` will also tell you the datatypes it guessed for the columns.\nLet's inspect our dataset:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-4_2adb34ba9f7cdf06f4ca53596fac768d'}\n\n```{.r .cell-code}\ngapminder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nThe gapminder dataset [@bryanGapminderDataGapminder2017] is an excerpt\nfrom the [gapminder project](https://www.gapminder.org/) and contains the life expectancy at birth for 142 countries at 5 year intervals between 1952 and 2007.\nIt also contains the population and the Gross Domestic Product (GDP) per Inhabitant.\nWe will built a visualization later on.\n\nA cool trick for when you have your data in a variable\nis the `View` function.\nThe same effect can be reached by `ctrl+click`ing on it\nor by using the button next to it in the environment panel.\n\nIt should be noted that the `read_csv` function can also\nread data from links and will download it automatically.\nHowever, in order to have the data nice and safe,\nwe might want to save if somewhere, just in case\n(links can change, especially when it is someone else's link).\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-5_58c3e749a25c5d1dec7f7fd784f93346'}\n\n```{.r .cell-code}\nour_data <- read_csv(\"https://raw.githubusercontent.com/jmbuhr/dataintro/main/data/02/gapminder.csv\")\n\nwrite_csv(our_data, \"our-data.csv\")\n```\n:::\n\n\n## A Project-based Workflow\n\nLast week we simply went ahead and created a script file and an Rmarkdown file in some folder on our computer.\nBut how does R known, where the script is?\nHow does it know, where to look, when we tell it to read in a file or save a plot?\nThe main folder where R starts is called the **working directory**.\nTo find out, what our current working directory is, we execute the function `getwd()` for get working directory:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-6_e9c26eb5ff3d64db12444f8ab2838d72'}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/home/jannik/teaching/dataintro\"\n```\n:::\n:::\n\n\nRStudio projects set this working directory automatically, which is very convenient.\nIt makes it easier for us to share code and projects, by simply copying the whole\nfolder.\nBut we have to follow one prerequisite.\nOur file paths need to be **relative**, not absolute.\nAn absolute file path starts at the root of our operating system,\nso on windows you will see something like `C:\\\\User\\Jannik\\Documents\\...`\nwhile on mac and linux it starts with `/home/jannik/Documents/...`.\nFor example, I could read the same gapminder dataset by:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-7_879ce64ece9ad4074afc5b0603bb6f30'}\n\n```{.r .cell-code}\nread_csv(\"/home/jannik/Documents/projects/teaching/dataintro/data/02/gapminder.csv\")\n```\n:::\n\n\nBut this is a terrible idea!\nIf I ever move my analysis folder, this file path will no longer\nbe correct and if someone else tries to run my code\nthey will most certainly not be called Jannik and have the exact same\ndirectory structure.\nSo it will also  not work.\n\nIn order for our work to be portable, robust and shareable,\nwe need our file paths to be relative to the root\nof our project (which is set by the RStudio project).\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-8_eef216a95a57b66adc705a6ad365b5b1'}\n\n```{.r .cell-code}\nread_csv(\"./data/02/gapminder.csv\")\n```\n:::\n\n\nHere, `./` refers to the current working directory,\nwhich is set by the RStudio project.\nIt can also be omitted (e.g. `data/02/...`),\nbut the path can't start with `/` because this would\nmark it as an absolute path.\n\nThere is also a function to set the working directory\nourselves (it is called `setwd`),\nbut I ask you to never use it.\nBecause in order to use it, you would have to specify\nthe working directory using an absolute path,\nrendering the script useless for anyone that is not you.\nUse RStudio projects instead.\n\nThere is one thing I didn't tell you about Rmarkdown documents, yet.\nTheir working directory is always the folder they are in,\neven if they are in some subdirectory of a project.\nIn a way this also means that you don't necessarily need a project to work with Rmarkdown,\nbut having one anyway makes it easier to keep track of your files and\nhave a consistent structure.\n\n### Common Hurdles when Importing Data\n\nSo, importing the gapminder csv went smoothly.\nBut this will not always be the case.\nWe will now look at common hurdles when importing data.\n\nThe function we just used was called `read_csv`, because it reads a file format that consists of **comma separated values**.\nLook at the raw file in a text editor (not word) like notepad or RStudio to see why.\nBut the file extension `.csv` can sometimes be lying...\n\nBecause in German, the comma is used to separate decimal numbers\n(vs. the dot in English),\na lot of Software will output a different type of csv-file when configured in German.\nIt will still call it csv,\nbut actually it is separated by semicolons!\nWe have a special function for this:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-9_fcbf38012b669db3a021dd4d78f56be5'}\n\n```{.r .cell-code}\nread_csv2(\"data/02/gapminder_csv2.csv\")\n```\n:::\n\n\nWhen looking through the autocompletion options that pop up when you are typing the function name, you might have noticed a similar function `read.csv` and `read.csv2`.\nThese are the functions that come with R, without any packages like the tidyverse.\nYou can of course use those as well,\nbut the tidyverse functions provide a more consistent experience and\nhave less surprising quirks.\nI am teaching the tidyverse first because it allows you to do more while\nhaving to learn less edge cases.\n\nIf we look at yet another file `gapminder_tsv.txt`,\nwe notice that the file extension doesn't tell us much about the format, only that it is text (as opposed to a binary format only computers can read).\nIf we look into the file:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-10_32cd7a822cbdaa9f8960245ff0cc9cc6'}\n\n```{.r .cell-code}\nread_lines(\"data/02/gapminder_tsv.txt\", n_max = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"country\\tcontinent\\tyear\\tlifeExp\\tpop\\tgdpPercap\"    \n[2] \"Afghanistan\\tAsia\\t1952\\t28.801\\t8425333\\t779.4453145\"\n[3] \"Afghanistan\\tAsia\\t1957\\t30.332\\t9240934\\t820.8530296\"\n```\n:::\n:::\n\n\nWe notice that the values are separated by \"\\t\", a special sequence that stands for the tab character. The `read_tsv` function will do the job.\nI am not showing the output here because it is just\nthe gapminder dataset once again.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-11_a9a68c5862bf17c68f35950b16bd9b7d'}\n\n```{.r .cell-code}\nread_tsv(\"data/02/gapminder_tsv.txt\")\n```\n:::\n\n\nIf the separator (also called delimiter) is even more obscure,\nwe can use the general function `read_delim`.\nSay a co-worker misunderstood us and thought tsv stands for \"Tilde separated values\",\nwe can still read his file.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-12_ba1701f661aff45bac6df691904fd6c3'}\n\n```{.r .cell-code}\nread_delim(\"data/02/obscure_file.tsv\", \"~\")\n```\n:::\n\n\nThere are more ways in which raw data can be messy or hard to read depending on the machine but I can't show all of them.\nOne common thing you will encounter though is measurement machines writing some additional information in the first couple of lines before the actual data\n(like the time of the measurement).\nIn this example:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-13_1fbdc7bfeb2338e4fe7ca3373b48ec8b'}\n\n```{.r .cell-code}\nread_lines(\"data/02/gapminder_messier.csv\", n_max = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"# Some comment about the data\"                   \n[2] \"And maybe a personal note\"                       \n[3] \"country,continent,year,lifeExp,pop,gdpPercap\"    \n[4] \"Afghanistan,Asia,1952,28.801,8425333,779.4453145\"\n[5] \"Afghanistan,Asia,1957,30.332,9240934,820.8530296\"\n```\n:::\n:::\n\n\nThe first 2 lines are not part of the data.\nReading the file normally as a csv would produce something weird:\nBecause the first line does not contain any commata, it will assume that the file contains only one column and also report a bunch of **parsing failures**.\nParsing is the act of turning data represented as raw text into a useful format,\nlike a table of numbers.\n\nWe can fix this by telling R to skip the first 2 lines entirely:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-14_c7fbaed48f6c2b50d5de61b6c02b03c8'}\n\n```{.r .cell-code}\nread_csv(\"data/02/gapminder_messier.csv\", skip = 2, n_max = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n```\n:::\n:::\n\n\nI was using the `n_max` argument of the functions above to save space in this lecture script.\n\nWe can also read excel files it using a function from the `readxl` package.\nThis package is automatically installed with the tidyverse,\nbut it is not loaded along with the other packages via `library(tidyverse)`.\nWe can either load it with `library(readxl)` or\nrefer to a single function from the package without loading the whole thing\nusing double colons (`::`) like so:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-15_e98c14da4cf6ed847afc9bd7b124037f'}\n\n```{.r .cell-code}\nreadxl::read_xlsx(\"data/02/gapminder.xlsx\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nRemember, that when we read in the gapminder dataset for the first\ntime to day, we saved it in a variable called `gapminder`,\nso we are going to use this going forward.\n\n## Wrangling Data with `dplyr`\n\n<aside>\n\n<a href=\"https://dplyr.tidyverse.org/\"> ![](images/dplyr.png) </a>\n\n</aside>\n\nThere a are a number of ways in which we can manipulate data.\nOf course I mean manipulate in it's original sense, not the malicious one.\nThis is sometimes referred to as **data wrangling** and within the tidyverse,\nthis is a job for the `dplyr` package (short for data plyer, the tool you see in the logo).\n\ndplyr provides functions for various operations on our data.\nTheses functions are sometimes also called **dplyr verbs**.\nAll of them take a `tibble` or `data.frame` as input (plus additional parameters) and always return a `tibble`.\nBut enough talk, let's go wrangling!\n\n![Let's go data wrangling! Artwork by Allison Horst](images/dplyr_wrangling.png)\n\n### select\n\nThe first verb we introduce is used to select columns.\nAnd hence, it is called `select`.\nThe first argument is always the data, followed by an arbitrary number of column names.\nWe can recognize functions the take an arbitrary number of additional arguments by the `...` in the autocompletion and help page.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-16_acfa91d78b222f9c0142f34a4ef5197f'}\n\n```{.r .cell-code}\nselect(gapminder, country, year, gdpPercap)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 3\n   country      year gdpPercap\n   <chr>       <dbl>     <dbl>\n 1 Afghanistan  1952      779.\n 2 Afghanistan  1957      821.\n 3 Afghanistan  1962      853.\n 4 Afghanistan  1967      836.\n 5 Afghanistan  1972      740.\n 6 Afghanistan  1977      786.\n 7 Afghanistan  1982      978.\n 8 Afghanistan  1987      852.\n 9 Afghanistan  1992      649.\n10 Afghanistan  1997      635.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nIt might be confusing why we don't need quotation marks around the column names like we do \nin other languages or even other parts of R.\n\nThis concept is known as **quasiquotation** or **data masking**.\nIt is quite unique to R, but it allows functions to known about the content of the data that is passed to them and use this as the environment in which they do their computations and search for variable names.\nSo while the variable `country` doesn't exist in the global environment,\nit does exist as a column of the gapminder tibble.\n\n> `dplyr` functions always look in the data first when they search for names.\n\nThe help page for `select` tells us more about the different ways in which we can select columns.\nHere are a couple of examples without the output,\nrun them in your R session to confirm that they do what you think they do\n(but do have a look at the help pages yourselves, they are quite well written).\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-17_2f5235ceb872d6e0c81c14155ee15dc5'}\n\n```{.r .cell-code}\nselect(gapminder, year:pop)\nselect(gapminder, starts_with(\"co\"))\nselect(gapminder, where(is.numeric))\nselect(gapminder, where(is.character))\nselect(gapminder, c(1, 3, 4))\n```\n:::\n\n\n### filter\n\nAfter selecting columns it is only natural to ask how to select rows.\nThis is achieved with the function `filter`.\n\n![Filter data. Artwork by Allison Horst](images/dplyr_filter.jpg)\n\nHere, we select all rows, where the year is greater than 2000\nand the country is New Zealand.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-18_830c73f82ea4707b727cdd33cf95adb4'}\n\n```{.r .cell-code}\nfilter(gapminder, year > 2000, country == \"New Zealand\")\n```\n:::\n\n\nBecause text comparisons are cases sensitive, we would have missed\nNew Zealand had we written it with lowercase letters.\nIn order to make sure we find the correct country,\nit can be helpful to simply convert all country names\nto lower case, and in fact we can use functions on our columns\nstraight inside of any dplyr verb.\nFunctions that deal with text (strings or character in R's language)\nin the tidyverse start with `str_`, so they are easy to find\nwith autocompletion.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-19_fd61f761059f4c0172f4ce8e56fda36e'}\n\n```{.r .cell-code}\nfilter(gapminder, year > 2000, str_to_lower(country) == \"new zealand\")\n```\n:::\n\n\nInstead of combining conditions with `,` (which works the same as\n`&` here), we can also use `|` meaning **or**.\nHere, we get all rows where the country is New Zealand or\nthe country is Afghanistan.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-20_d85c530a2274a9f227fc53156b5c8b7b'}\n\n```{.r .cell-code}\nfilter(gapminder, country == \"New Zealand\" | country == \"Afghanistan\")\n```\n:::\n\n\nThis particular comparison can be written more succinctly,\nby asking (for every row), is the particular country `%in%` this vector?\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-21_18591b2811027df3210c200235f9cea8'}\n\n```{.r .cell-code}\nfilter(gapminder, country %in% c(\"New Zealand\", \"Afghanistan\"))\n```\n:::\n\n\n### mutate\n\nWe are back at manipulating columns, this time by creating new ones or changing old ones.\nThe `dplyr` verb that does that is called `mutate`.\nFor example, we might want to calculate the total GDP from the GDP per Capita and the population:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-22_333c486ca4f840022693002f13e99c3b'}\n\n```{.r .cell-code}\nmutate(gapminder, gdp = pop * gdpPercap)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap          gdp\n   <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>        <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.  6567086330.\n 2 Afghanistan Asia       1957    30.3  9240934      821.  7585448670.\n 3 Afghanistan Asia       1962    32.0 10267083      853.  8758855797.\n 4 Afghanistan Asia       1967    34.0 11537966      836.  9648014150.\n 5 Afghanistan Asia       1972    36.1 13079460      740.  9678553274.\n 6 Afghanistan Asia       1977    38.4 14880372      786. 11697659231.\n 7 Afghanistan Asia       1982    39.9 12881816      978. 12598563401.\n 8 Afghanistan Asia       1987    40.8 13867957      852. 11820990309.\n 9 Afghanistan Asia       1992    41.7 16317921      649. 10595901589.\n10 Afghanistan Asia       1997    41.8 22227415      635. 14121995875.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nNotice, that none of the functions changed the original variable `gapminder`.\nThey only take an input and return and output,\nwhich makes it easier to reason about our code and later chain pieces of code together.\nHow do you change it then?\nUse the Force! ... ahem, I mean, the assignment operator (`<-`).\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-23_d691dcf726c273d8889615e81f1b1f14'}\n\n```{.r .cell-code}\ngapminder <- mutate(gapminder, gdp = pop * gdpPercap)\n```\n:::\n\n\nHere, the power of dplyr shines.\nIt knows that `pop` and `gdpPercap` are columns of the tibble and\nthat `gdp` refers to the new name of the freshly created column.\n\n### Interlude: Begind the magic, handling data with base-R\n\nThis section is meant to show you what happens behind the scenes.\nIt is not strictly necessary to understand all the details of it in order to work effectively with the tidyverse, but it helps especially when things don't go as planned.\n\nLet's create a tibble to play with:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-24_1625c1e93a9ab9831dd0c10f65c6f9fa'}\n\n```{.r .cell-code}\ntest_tibble <- tibble(\n  x = 1:5,\n  y = x ^ 2,\n  z = c(\"hello\", \"world\", \"test\", \"four\", \"five\")\n)\n\ntest_tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n      x     y z    \n  <int> <dbl> <chr>\n1     1     1 hello\n2     2     4 world\n3     3     9 test \n4     4    16 four \n5     5    25 five \n```\n:::\n:::\n\n\nInstead of the tidyverse functions, we can also use\nwhat is called **subsetting**, getting a subset of our datasctructure,\nwith square brackets:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-25_f22be6aceb34ffacbb56b7890ac8e881'}\n\n```{.r .cell-code}\ntest_tibble[c(1, 3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n      x z    \n  <int> <chr>\n1     1 hello\n2     2 world\n3     3 test \n4     4 four \n5     5 five \n```\n:::\n:::\n\n\nThis selected the first and third column.\nThis also works for lone vectors:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-26_d73c927753c76dfa6a1dd418a3aa9477'}\n\n```{.r .cell-code}\nevens <- seq(0, 10, 2)\nevens[c(1, 3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 4\n```\n:::\n:::\n\n\nIf we want to select columns by their names without the\ntidyverse, we have to pass these names as a character vector\n(hence the quotation marks).\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-27_fdfc07257c798bd4c17ee17ef4599fb0'}\n\n```{.r .cell-code}\ntest_tibble[c(\"x\", \"z\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n      x z    \n  <int> <chr>\n1     1 hello\n2     2 world\n3     3 test \n4     4 four \n5     5 five \n```\n:::\n:::\n\n\nIf we have two things in the square brackets, separated by a comma,\nthe first refers to the rows and the second refers to the columns.\ne.g. this would be \"the first row and the columns from 1 to 2\":\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-28_b9b245a8a9805a6538b0184994394490'}\n\n```{.r .cell-code}\ntest_tibble[1, 1:2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n      x     y\n  <int> <dbl>\n1     1     1\n```\n:::\n:::\n\n\nInternally, tibbles / dataframes are lists of columns.\nLists have more ways of accessing their elements.\nThe `$` symbol gets us an element from the list:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-29_6750d14a4d7a86976ce57af91c537a44'}\n\n```{.r .cell-code}\ntest_tibble$x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\nIf we want to use numbers (=indices) to get a single\nelement from a list (or a column from a tibble),\nwe have ot use double square brackets:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-30_1e2f6bbd1784e4ed7362580a0d5818a9'}\n\n```{.r .cell-code}\ntest_tibble[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\nThe reason for this: Single square brackets give us a subset\nof the list, which is still packed up in a list.\nIf we want to unpack it to work with it we need the\ncontent of just one element `[[` does that for us. \n\nThe `pull` function from the tidyverse works like `$`.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-31_4b2bee0038fda7113ba3ffcce29cc4b3'}\n\n```{.r .cell-code}\npull(test_tibble, x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\nSubsetting not only works for looking at things,\nit also allows us to replace the part we are subsetting:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-32_b5f14e321c01d254259eb77734880e91'}\n\n```{.r .cell-code}\nx <- 1:10\nx[1] <- 42\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 42  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\n> Note:\\\n> The base-R and the tidyverse way are not mutually exclusive.\n  Sometimes you can mix and match.\n\n### The pipe `%>%`\n\nThe tidyverse functions are easier to compose (i.e. chain together).\nTo facilitate this, we introduce another operator, a bit like `+` for numbers or the `+` to add ggplot components, but specially for functions.\nThe pipe, which you can either type or insert in RStudio with **Ctrl+Shift+M**,\ntakes it's left side and passes it as the first argument to the function on the right side\n\nWhy is this useful?\nImagine our data processing involves a bunch of steps,\nso we save the output to intermediate variables.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-33_30bea0d3df6e848bbb3df1a624a5db39'}\n\n```{.r .cell-code}\nsubset_gapminder <- select(gapminder, country, year, pop)\nfiltered_gapminder <- filter(subset_gapminder, year > 200)\nfinal_gapminder <- mutate(filtered_gapminder, pop_thousands = pop / 1000)\nfinal_gapminder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 4\n   country      year      pop pop_thousands\n   <chr>       <dbl>    <dbl>         <dbl>\n 1 Afghanistan  1952  8425333         8425.\n 2 Afghanistan  1957  9240934         9241.\n 3 Afghanistan  1962 10267083        10267.\n 4 Afghanistan  1967 11537966        11538.\n 5 Afghanistan  1972 13079460        13079.\n 6 Afghanistan  1977 14880372        14880.\n 7 Afghanistan  1982 12881816        12882.\n 8 Afghanistan  1987 13867957        13868.\n 9 Afghanistan  1992 16317921        16318.\n10 Afghanistan  1997 22227415        22227.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nHowever, we don't really need those intermediate variables\nand they just clutter our code.\nThe pip allows us to express our data processing as a series of\nsteps:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-34_daac2ec5f5b10bc7a420ac11972a6125'}\n\n```{.r .cell-code}\nfinal_gapminder <- gapminder %>% \n  select(country, year, pop) %>% \n  filter(year > 2000) %>% \n  mutate(pop_thousands = pop / 1000)\n\nfinal_gapminder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 284 × 4\n   country      year      pop pop_thousands\n   <chr>       <dbl>    <dbl>         <dbl>\n 1 Afghanistan  2002 25268405        25268.\n 2 Afghanistan  2007 31889923        31890.\n 3 Albania      2002  3508512         3509.\n 4 Albania      2007  3600523         3601.\n 5 Algeria      2002 31287142        31287.\n 6 Algeria      2007 33333216        33333.\n 7 Angola       2002 10866106        10866.\n 8 Angola       2007 12420476        12420.\n 9 Argentina    2002 38331121        38331.\n10 Argentina    2007 40301927        40302.\n# ℹ 274 more rows\n```\n:::\n:::\n\n\nYou can read the pipe in your head as \"and then\" or \"take ... pass it into ...\".\n\nAnd because all main `tidyverse` functions take data as their first argument,\nwe can chain them together fluently\nAdditionally, it enables autocompletion of column names inside of the function\nthat gets the data.\n\nNext to the tidyverse pipe `%>%`, you might also see `|>` at some point.\nThe latter is a pipe that was introduced to base-R because this whole\npiping thing got so popular they are making it part of the core language.\n\n### arrange\n\nA simple thing you might want from a table is to sort it based on some column. This is what `arrange` does:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-35_c6579a67cb4b08f761f77ab99db3d5fc'}\n\n```{.r .cell-code}\ngapminder %>% \n  arrange(year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap           gdp\n   <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>         <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.   6567086330.\n 2 Albania     Europe     1952    55.2  1282697     1601.   2053669902.\n 3 Algeria     Africa     1952    43.1  9279525     2449.  22725632678.\n 4 Angola      Africa     1952    30.0  4232095     3521.  14899557133.\n 5 Argentina   Americas   1952    62.5 17876956     5911. 105676319105.\n 6 Australia   Oceania    1952    69.1  8691212    10040.  87256254102.\n 7 Austria     Europe     1952    66.8  6927772     6137.  42516266683.\n 8 Bahrain     Asia       1952    50.9   120447     9867.   1188460759.\n 9 Bangladesh  Asia       1952    37.5 46886859      684.  32082059995.\n10 Belgium     Europe     1952    68    8730405     8343.  72838686716.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nThe helper function `desc` marks a column to be arranged in descending order.\nWe can arrange by multiple columns, where the first will be most important.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-36_ed8ae2472505d9a3b684ec2e3901f7a6'}\n\n```{.r .cell-code}\ngapminder %>% \n  arrange(desc(year), pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 7\n   country               continent  year lifeExp     pop gdpPercap          gdp\n   <chr>                 <chr>     <dbl>   <dbl>   <dbl>     <dbl>        <dbl>\n 1 Sao Tome and Principe Africa     2007    65.5  199579     1598.   319014077.\n 2 Iceland               Europe     2007    81.8  301931    36181. 10924101861.\n 3 Djibouti              Africa     2007    54.8  496374     2082.  1033689705.\n 4 Equatorial Guinea     Africa     2007    51.6  551201    12154.  6699346424.\n 5 Montenegro            Europe     2007    74.5  684736     9254.  6336475807.\n 6 Bahrain               Asia       2007    75.6  708573    29796. 21112675360.\n 7 Comoros               Africa     2007    65.2  710960      986.   701111696.\n 8 Reunion               Africa     2007    76.4  798094     7670.  6121478793.\n 9 Trinidad and Tobago   Americas   2007    69.8 1056608    18009. 19027934931.\n10 Swaziland             Africa     2007    39.6 1133066     4513.  5114071458.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\n### summarise\n\nTo condense one or multiple columns into summary values, we use `summarise`.\nLike with mutate, we can calculate multiple things in one step.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-37_fa6de21549a5286784eef394b5a9fafd'}\n\n```{.r .cell-code}\ngapminder %>% \n  summarise(\n    max_year = min(year),\n    pop = max(pop),\n    mean_life_expectancy = mean(lifeExp)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  max_year        pop mean_life_expectancy\n     <dbl>      <dbl>                <dbl>\n1     1952 1318683096                 59.5\n```\n:::\n:::\n\n\nBut condensing whole columns into one value, flattening the tibble in the style of Super Mario jumping on mushrooms, is often not what we need.\nWe would rather know the summaries within certain groups.\nFor example the maximal gdp **per country**. This is what `group_by` is for.\n\n### group_by\n\n`group_by` is considered an adverb, because it doesn't change the data itself but it changes how subsequent functions handle the data. For example, if a tibble has groups, all summaries are calculated within these groups:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-38_b3dcfca9b4de1f8e1e42574ab4ccdeed'}\n\n```{.r .cell-code}\ngapminder %>% \n  group_by(year) %>% \n  summarise(\n    lifeExp = mean(lifeExp)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 2\n    year lifeExp\n   <dbl>   <dbl>\n 1  1952    49.1\n 2  1957    51.5\n 3  1962    53.6\n 4  1967    55.7\n 5  1972    57.6\n 6  1977    59.6\n 7  1982    61.5\n 8  1987    63.2\n 9  1992    64.2\n10  1997    65.0\n11  2002    65.7\n12  2007    67.0\n```\n:::\n:::\n\n\n`summarize` removes one level of grouping.\nIf the data was grouped by multiple features, this means that some groups remain.\nWe can make sure that the data is no longer grouped with `ungroup`.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-39_df9a8bb974ab231e0f6962d73b2624ac'}\n\n```{.r .cell-code}\ngapminder %>% \n  group_by(year, continent) %>% \n  summarise(\n    lifeExp = mean(lifeExp)\n  ) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60 × 3\n    year continent lifeExp\n   <dbl> <chr>       <dbl>\n 1  1952 Africa       39.1\n 2  1952 Americas     53.3\n 3  1952 Asia         46.3\n 4  1952 Europe       64.4\n 5  1952 Oceania      69.3\n 6  1957 Africa       41.3\n 7  1957 Americas     56.0\n 8  1957 Asia         49.3\n 9  1957 Europe       66.7\n10  1957 Oceania      70.3\n# ℹ 50 more rows\n```\n:::\n:::\n\n\nGroups also work within `mutate` and `filter`.\nFor example, we can get all rows where the gdp per Person was highest per country:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-40_b2b02866b9b5572a669e342d1d0bcc16'}\n\n```{.r .cell-code}\ngapminder %>%\n  group_by(country) %>% \n  filter(gdpPercap == max(gdpPercap))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 142 × 7\n# Groups:   country [142]\n   country     continent  year lifeExp       pop gdpPercap           gdp\n   <chr>       <chr>     <dbl>   <dbl>     <dbl>     <dbl>         <dbl>\n 1 Afghanistan Asia       1982    39.9  12881816      978.  12598563401.\n 2 Albania     Europe     2007    76.4   3600523     5937.  21376411360.\n 3 Algeria     Africa     2007    72.3  33333216     6223. 207444851958.\n 4 Angola      Africa     1967    36.0   5247469     5523.  28980597822.\n 5 Argentina   Americas   2007    75.3  40301927    12779. 515033625357.\n 6 Australia   Oceania    2007    81.2  20434176    34435. 703658358894.\n 7 Austria     Europe     2007    79.8   8199783    36126. 296229400691.\n 8 Bahrain     Asia       2007    75.6    708573    29796.  21112675360.\n 9 Bangladesh  Asia       2007    64.1 150448339     1391. 209311822134.\n10 Belgium     Europe     2007    79.4  10392226    33693. 350141166520.\n# ℹ 132 more rows\n```\n:::\n:::\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-41_3afc0f5a5685dc28ad7a743cc466c335'}\n\n```{.r .cell-code}\ngapminder %>% \n  group_by(year) %>%\n  mutate(pop = pop / sum(pop))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 7\n# Groups:   year [12]\n   country     continent  year lifeExp     pop gdpPercap          gdp\n   <chr>       <chr>     <dbl>   <dbl>   <dbl>     <dbl>        <dbl>\n 1 Afghanistan Asia       1952    28.8 0.00350      779.  6567086330.\n 2 Afghanistan Asia       1957    30.3 0.00347      821.  7585448670.\n 3 Afghanistan Asia       1962    32.0 0.00354      853.  8758855797.\n 4 Afghanistan Asia       1967    34.0 0.00359      836.  9648014150.\n 5 Afghanistan Asia       1972    36.1 0.00366      740.  9678553274.\n 6 Afghanistan Asia       1977    38.4 0.00379      786. 11697659231.\n 7 Afghanistan Asia       1982    39.9 0.00300      978. 12598563401.\n 8 Afghanistan Asia       1987    40.8 0.00296      852. 11820990309.\n 9 Afghanistan Asia       1992    41.7 0.00319      649. 10595901589.\n10 Afghanistan Asia       1997    41.8 0.00403      635. 14121995875.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\n\n### others:\n\nWe can rename columns with `rename`:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-42_18037a96a1b6d1c569133a01ee34c72e'}\n\n```{.r .cell-code}\ngapminder %>% \n  rename(population = pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp population gdpPercap          gdp\n   <chr>       <chr>     <dbl>   <dbl>      <dbl>     <dbl>        <dbl>\n 1 Afghanistan Asia       1952    28.8    8425333      779.  6567086330.\n 2 Afghanistan Asia       1957    30.3    9240934      821.  7585448670.\n 3 Afghanistan Asia       1962    32.0   10267083      853.  8758855797.\n 4 Afghanistan Asia       1967    34.0   11537966      836.  9648014150.\n 5 Afghanistan Asia       1972    36.1   13079460      740.  9678553274.\n 6 Afghanistan Asia       1977    38.4   14880372      786. 11697659231.\n 7 Afghanistan Asia       1982    39.9   12881816      978. 12598563401.\n 8 Afghanistan Asia       1987    40.8   13867957      852. 11820990309.\n 9 Afghanistan Asia       1992    41.7   16317921      649. 10595901589.\n10 Afghanistan Asia       1997    41.8   22227415      635. 14121995875.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nSometimes you want to refer to the size of the current group inside of `mutate` or `summarise`. The function to to just that is called `n()`. For example, I wonder how many rows of data we have per year.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-43_9156d288ac62aaee31b5fb43b8e74de7'}\n\n```{.r .cell-code}\ngapminder %>% \n  group_by(year) %>% \n  mutate(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 8\n# Groups:   year [12]\n   country     continent  year lifeExp      pop gdpPercap          gdp     n\n   <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>        <dbl> <int>\n 1 Afghanistan Asia       1952    28.8  8425333      779.  6567086330.   142\n 2 Afghanistan Asia       1957    30.3  9240934      821.  7585448670.   142\n 3 Afghanistan Asia       1962    32.0 10267083      853.  8758855797.   142\n 4 Afghanistan Asia       1967    34.0 11537966      836.  9648014150.   142\n 5 Afghanistan Asia       1972    36.1 13079460      740.  9678553274.   142\n 6 Afghanistan Asia       1977    38.4 14880372      786. 11697659231.   142\n 7 Afghanistan Asia       1982    39.9 12881816      978. 12598563401.   142\n 8 Afghanistan Asia       1987    40.8 13867957      852. 11820990309.   142\n 9 Afghanistan Asia       1992    41.7 16317921      649. 10595901589.   142\n10 Afghanistan Asia       1997    41.8 22227415      635. 14121995875.   142\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nA shortcut for `group_by` and `summarise` with `n()` is the `count` function:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-44_357ccfd391a7e6b91ff9016f2d72698b'}\n\n```{.r .cell-code}\ngapminder %>% \n  count(year, country) %>% \n  count(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n      n    nn\n  <int> <int>\n1     1  1704\n```\n:::\n:::\n\n\nIn general, you might find after solving a particular problem in a couple of steps that there is a more elegant solution. Do not be discouraged by that! It simply means that there is always more to learn, but the tools you already know by now will get you a very long way and set you on the right track.\n\nI think we learned enough dplyr verbs for now. We can treat ourselves to a little ggplot visualization.\n\n## Visualization and our first encounter with `factor`s\n\n<aside>\n\n<a href=\"https://forcats.tidyverse.org/\"> ![](images/forcats.png) </a>\n\n</aside>\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-45_fa30bf1eafa3cf8ee522259399550147'}\n\n```{.r .cell-code}\ngapminder %>% \n  ggplot(aes(year, lifeExp, group = country)) +\n  geom_line() +\n  facet_wrap(~continent)\n```\n\n::: {.cell-output-display}\n![](02-data-wrangling_files/figure-html/unnamed-chunk-45-1.png){width=100%}\n:::\n:::\n\n\nThe `facet_wrap` function slices our plot into theses subplots, a style of plot sometimes referred to as *small multiples*. At this point you might wonder: \"How do I control the order of these facets?\" The answer is: With a `factor`!\n\nAny time we have a vector that can be thought of as representing discrete categories (ordered or unordered), we can express this by turning the vector into a factor with the `factor` function. This enables R's functions to handle them appropriately. Let's create a little example. We start out with a character vector.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-46_5d35abe544990ecfa3955e9e150fd9f2'}\n\n```{.r .cell-code}\nanimals <- c(\"cat\", \"dog\", \"bear\", \"shark\")\nanimals <- factor(animals)\nanimals\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] cat   dog   bear  shark\nLevels: bear cat dog shark\n```\n:::\n:::\n\n\nNote the new information R gives us, the **Levels**, which is all possible values we can put into the factor. They are automatically ordered alphabetically on creation. We can also pass a vector of levels on creation.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-47_5551079aafcc788cee4f26f3b575766c'}\n\n```{.r .cell-code}\nanimals <- c(\"cat\", \"dog\", \"bear\", \"shark\")\nanimals <- factor(animals, levels = c(\"cat\", \"dog\"), ordered = TRUE)\nanimals\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] cat  dog  <NA> <NA>\nLevels: cat < dog\n```\n:::\n:::\n\n\nA factor can only contain elements that are in the levels, so because I omitted the whale shark, it will be turned into `NA`. The tidyverse contains the `forcats` package to help with factors. Most functions from this package start with `fct_`.\n\nFor example, the `fct_relevel` function,\nwhich keeps all levels but let's us change the order:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-48_4745badbabb86a04fc6012fba8e4a995'}\n\n```{.r .cell-code}\nanimals <- c(\"cat\", \"dog\", \"bear\", \"shark\")\nanimals <- factor(animals)\nfct_relevel(animals, c(\"shark\", \"dog\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] cat   dog   bear  shark\nLevels: shark dog bear cat\n```\n:::\n:::\n\n\nUsing this in action, we get:\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-49_08b1dc5246ee6c5d14fae0dd898fb1f1'}\n\n```{.r .cell-code}\ngapminder %>% \n  mutate(continent = fct_relevel(continent, \"Oceania\")) %>% \n  ggplot(aes(year, lifeExp, group = country)) +\n  geom_line(alpha = 0.3) +\n  facet_wrap(~ continent)\n```\n\n::: {.cell-output-display}\n![](02-data-wrangling_files/figure-html/unnamed-chunk-49-1.png){width=100%}\n:::\n:::\n\n\n\nNote: `fct_relevel` might be a very constructed example.\nMore often you will need its cousin `fct_reoder`\nto reorder a factor by the values of some other column.\n\nLet's make this plot a bit prettier by adding color!\nThe `gapminder` package that provided this dataset also included a nice color palette. I included it as a `.csv` file in the `data/` folder so that we can practice importing data once more. But you could also take the shortcut of getting it straight from the package (`gapminder::country_colors`). Here, we are using the `head` function to look at the first couple of rows of the tibble and to look at the first couple of elements of the named vector from the package.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-50_5505e79c081d41601bc84f05298121e1'}\n\n```{.r .cell-code}\ncountry_colors <- read_csv(\"data/02/country_colors.csv\")\ncolor <- country_colors$color\nnames(color) <- country_colors$country\nhead(color)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Nigeria            Egypt         Ethiopia Congo, Dem. Rep. \n       \"#7F3B08\"        \"#833D07\"        \"#873F07\"        \"#8B4107\" \n    South Africa            Sudan \n       \"#8F4407\"        \"#934607\" \n```\n:::\n:::\n\n\nHaving a named vector means that we can access individual elements\nby their names, and ggplot can use those names\nto match up for example colors with countries\nwhen we pass it to a `scale_` function.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-51_775611bb62feed0d92f28fb3e7c55c37'}\n\n```{.r .cell-code}\nx <- c(first = 1, second = 3, hello = 5)\nx[\"first\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfirst \n    1 \n```\n:::\n:::\n\n\nTo the final plot we also add `guides(color = \"none\")`,\nbecause if we were to show a guide (for discrete colors typically a legend),\nit would fill up the whole plot.\n\n\n::: {.cell hash='02-data-wrangling_cache/html/unnamed-chunk-52_2fc3e3404928bb5c5e2bab2cf9056afd'}\n\n```{.r .cell-code}\ngapminder %>% \n  mutate(continent = fct_relevel(continent, c(\"Oceania\"))) %>% \n  ggplot(aes(year, lifeExp, color = country)) +\n  geom_line() +\n  facet_wrap(~continent) +\n  guides(color = \"none\") +\n  scale_color_manual(values = color)\n```\n\n::: {.cell-output-display}\n![](02-data-wrangling_files/figure-html/unnamed-chunk-52-1.png){width=100%}\n:::\n:::\n\n\n## Exercises\n\n- Drink a cup of coffee or tea, relax, because you\n  just worked through quite a long video.\n- Familiarize yourself with the folders on your computer.\n  Make sure you understand, where your directories and files live.\n- Download the data for today in one of the ways taught.\n  You can refer to the script anytime.\n- The file `./data/02/exercise1.txt` is in an unfamiliar format.\n  - Find out how it is structured and read it in with `readr`.\n  - Create a scatterplot of the x and y column with `ggplot`.\n  - Look at the help page for `geom_point`.\n    What is the difference between `geom_point(aes(color = <something>))` and `geom_point(color = <something>)`?\n    A relevant hint is in the section about the `...`-argument.\n  - Make the plot pretty by coloring the points,\n    keeping in mind the above distinction.\n- Read in the `gapminder` dataset with `readr`\n  - Using a combination of `dplyr` verbs and / or\n    visualizations with `ggplot`,\n    answer the following questions:\n  - Which continent had the highest life expectancy on average\n    in the most current year? There are two options here.\n    First, calculate a simple mean for the countries\n    in each continent. Then, remember that the countries\n    have different population sizes, so we really need\n    a _weighted mean_ using R's function `weighted.mean()`.\n  - Is there a relationship between the GDP per capita and\n    the life expectancy? A visualization might be helpful.\n  - How did the population of the countries change over time?\n    Make the plot more informative by adding color,\n    facets and labels (with `geom_text`). Can you find out,\n    how to add the country name label only to the last year?\n    Hint: Have a look at the `data` argument that all `geom_`-functions\n    have.\n\n## Resources\n\nDon't miss the dedicated [Resources](resources) page.\n\n### Package Documentation\n\n-   [The tidyverse website](https://www.tidyverse.org/)\n-   [The readr package website with cheatsheet](https://readr.tidyverse.org/)\n-   [The dplyr package website with cheatsheet](https://dplyr.tidyverse.org/)\n\n### Getting Help\n\n-   [How to find help](https://www.tidyverse.org/help/#reprex)\n-   [R4DS online learning community](https://www.rfordatasci.com/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}