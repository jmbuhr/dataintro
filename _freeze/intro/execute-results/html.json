{
  "hash": "76fb3d40fce2cf44e086958bc5c25016",
  "result": {
    "markdown": "# Introduction {#intro}\n\n::: {.alert .alert-secondary}\nHi there!\nthis is the material for the first lecture.\nTo sign up, check out the [welcome page](https://jmbuhr.de/dataintro/index.html)\n:::\n\n> ... in which we get started with R and RStudio, learn about literate programming and build our first plot by discovering a Grammar of Graphics.\n\n\n{{< youtube r0bWxrzu4tg >}}\n\n\n\n## What You will Learn\n\nThroughout your scientific career --- and potentially outside of it --- you will encounter various forms of data.\nMaybe you do an experiment and measured the fluorescence of a molecular probe, or you simply count the penguins at your local zoo.\nEverything is data in some form or another.\nBut raw numbers without context are meaningless and tables of numbers are not only boring to look at, but often hide the actual structure in the data.\n\nIn this course you will learn to handle different kinds of data.\nYou will learn to create pretty and insightful visualizations, compute different statistics on your data and also what these statistical concepts mean.\nFrom penguins to p-values, I got you covered.\n\nThe course will be held in English, as the concepts covered will directly transfer to the research you do, where the working language is English.\nThat being said, feel free to ask questions in any language that I understand, so German is also fine.\nMy Latin is a little rusty, thought.\n\nIn this course, we will be using the programming language R.\nR is a language particularly well suited for data analysis, because it was initially designed by statisticians and because of the interactive nature of the language, which makes it easier to get started.\nSo don't fret if this is your first encounter with programming, we will take one step at a time.\n\nThe datasets chosen to illustrate the various concepts and tools are not particularly centered around Biology.\nRather, I chose general datasets that require less introduction and enable us to focus on learning R and statistics.\nThis is why we will be talking about penguins, racing games or life expectancy instead of intricate molecular measurements.\n\n## Execute R Code\n\nYou can now execute commands in the R console in the bottom left.\nFor example we can calculate a mathematical expression:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-1_7e7b214ecf00fd2dc994a0bfb81be585'}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nOr generate the numbers from one to 10:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-2_f140547b31341e623f57065565e82cea'}\n\n```{.r .cell-code}\n1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\nBut I rarely type directly into the console.\nBecause we want our results to be reproducible, we write our code in a **script** first, so that the next person [^intro-1] can see what we did and replicate our analysis.\nYou will see that reproducibility is quite near and dear to me, so it will pop up once or twice.\nAnd as scientists, I am sure you understand the importance.\n\n[^intro-1]: This will most likely be future You.\n    And you will thank yourself later\n\n> A script is like a recipe.\n> It is the most important part of your data analysis workflow, because as long as you have the recipe, you can recreate whatever products (e.g. plots, statistics, tables) you have with ease.\n\nTo create a new script, click the little button in the top left corner.\nIn a script you can type regular R code, but it won't get executed straight away.\nTo send a line of code to the console to be executed, hit **Ctrl+Enter**.\nGo ahead, try it with:\n\n## Get to know RStudio\n\nBefore we get deeper into R, let's talk a little bit about our Home when working with R: RStudio.\n\nThere is one important setting that I would like you to change: Under Tools -\\> Global Options make sure that \"Restore .RData into workspace at startup\" is **unchecked**.\nThe workspace that RStudio would save as `.RData` contains all objects created in a session, which is, what we can see in the **Environment** pane (by default in the top right panel, bottom right in my setup).\nWhy would we not want to load the objects we created in the last session into our current session automatically?\nThe reason is reproducibility.\nWe want to make sure that everything our analysis needs is in the script.\nIt creates our variables and plots from the raw data and should be the sole source of truth.\n\nCheck out the lecture video for further customization of RStudio e.g. with themes and make sure to also use *RStudio Projects* to structure your work.\n\n## Expressions: Tell R to do things\n\nR can do lot's of things, but let's start with some basics, like calculating.\nEverything that starts with `#` is a comment and will be ignored by R.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-3_cbd0538a373e83a07a7a211013d32fe2'}\n\n```{.r .cell-code}\n1 + 1 # addition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n32 / 11 # division\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.909091\n```\n:::\n\n```{.r .cell-code}\n3 * 4 # multiplication\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n13 %% 5 # modulo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n13 %/% 5 # integer division\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nCreate vectors with the `:` operator, e.g. numbers from:to\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-4_ab1fe7d0baa2a39f8aad560997e59074'}\n\n```{.r .cell-code}\n1:4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4\n```\n:::\n:::\n\n\nAnd mathematical operations are automatically \"vectorized\":\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-5_4d43bcd2a31b68745004c280ebc9abcd'}\n\n```{.r .cell-code}\n1:3 + 1:3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 6\n```\n:::\n:::\n\n\nIn fact, R as no scalars (individual values), those are just vectors of length 1.\n\n## Variables: Boxes for things\n\nOften, you will want to store the result of a computation for reuse, or to give it a sensible name and make your code more readable.\nThis is what **variables** are for.\nWe can assign a value to a variable using the assignment operator `<-` (In RStudio, there is a shortcut for it: **Alt+Minus**):\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-6_f8802f99cdb11084b95ea07466266513'}\n\n```{.r .cell-code}\nmy_number <- 42\n```\n:::\n\n\nExecuting the above code will not give you any output, but when you use the name of the variable, you can see its content.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-7_57d5ce83c71828438edb4d2d298a7a40'}\n\n```{.r .cell-code}\nmy_number\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 42\n```\n:::\n:::\n\n\nAnd you can do operations with those variables:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-8_6c43f4fe38f15ce485ec200d845d54ef'}\n\n```{.r .cell-code}\nx <- 41\ny <- 1\nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 42\n```\n:::\n:::\n\n\n> **NOTE** Be careful about the order of execution!\n> R enables you to work interactively and to execute the code you write in your script in any order with `Ctrl+Enter`, but when you execute (=\"source\") the whole script, it will be executed from top to bottom.\n\nFurthermore, code is not executed again automatically, if you change some dependency of the expression later on.\nSo the second assignment to x doesn't change y.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-9_6f3522276b50e26605dfda8259e9b81e'}\n\n```{.r .cell-code}\nx <- 1\ny <- x + 1\nx <- 1000\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nVariable names can contain letters (capitalization matters), numbers (but not as the first character) and underscores `_`.\n[^intro-2]\n\n[^intro-2]: They can also contain dots (`.`), but it is considered bad practice, because it can lead to some confusing edge cases.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-10_88f0684742bdb78e5388da260e52f56c'}\n\n```{.r .cell-code}\n# snake_case\nmain_character_name <- \"Kvothe\"\n\n# or camelCase\nbookTitle <- \"The Name of the Wind\"\n\n# you can have numbers in the name\nx1 <- 12\n```\n:::\n\n\n![A depiction of various naming styles by @ArtworkAllisonHorst](images/coding_cases.png)\n\nA good convention is to always use `snake_case`.\n\n## Atomic datatype\n\nFirst we have numbers (which internally are called `numeric` or `double`)\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-11_9dbe6f91bb6eece26f85ff4667a209c1'}\n\n```{.r .cell-code}\n12\n12.5\n```\n:::\n\n\nThen, there are whole numbers (`integer`)\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-12_4a0f284d553904c8f18cece298a08e15'}\n\n```{.r .cell-code}\n1L # denoted by L\n```\n:::\n\n\nas well as the rarely used complex numbers (`complex`)\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-13_9651d40f050fc505a45a5081e6606149'}\n\n```{.r .cell-code}\n1 + 3i # denoted by the small i for the imaginary part\n```\n:::\n\n\nText data however will be used more often (`character`, `string`).\nEverything enclosed in quotation marks will be treated as text.\nDouble or single quotation marks are both fine.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-14_ef1f26a802178b644076190ac19b9472'}\n\n```{.r .cell-code}\n\"It was night again.\"\n'This is also text'\n```\n:::\n\n\nLogical values can only contain yes or no, or rather `TRUE` and `FALSE` in programming terms (`boolean`, `logical`).\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-15_0ec9892ae43637a3bc836c82e7774743'}\n\n```{.r .cell-code}\nTRUE\nFALSE\n```\n:::\n\n\nThere are some special types that mix with any other type.\nLike `NULL` for no value and `NA` for \"Not Assigned\".\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-16_99e63aff127fc61ab5037d06a97e7a22'}\n\n```{.r .cell-code}\nNULL\nNA\n```\n:::\n\n\n`NA` is contagious.\nAny computation involving `NA` will return `NA` (because R has no way of knowing the answer):\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-17_a01cd503cd84a3389ba1c2298d579c8f'}\n\n```{.r .cell-code}\nNA + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nmax(NA, 12, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\nBut some functions can remove `NA`s before giving us an answer:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-18_4998da2744c70dc50b682bd24044ef7a'}\n\n```{.r .cell-code}\nmax(NA, 12, 1, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n:::\n\n\nYou can ask for the datatype of an object with the function `typeof`:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-19_ca71cc17249d13b248b65803002eb19f'}\n\n```{.r .cell-code}\ntypeof(\"hello\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\nThere is also a concept called factors (`factor`) for categorical data, but we will talk about that later, when we get deeper into vectors.\n\n## Functions: Calculate, run and automate things\n\n> In R, everything that exists is an object, everything that does something is a function.\n\nFunctions are the main workhorse of our data analysis.\nFor example, there are mathematical functions, like `sin`, `cos` etc.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-20_eeb7f2e38bfdbd565a9cb0cb125cf829'}\n\n```{.r .cell-code}\nsin(x = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\nFunctions take arguments (sometimes called parameters) and sometimes they also return things.\nThe `sin` function takes just one argument `x` and returns its sine.\nWhat we do with the returned value is up to us.\nWe can use it directly in another computation or store it in a variable.\nIf we don't do anything with the return value, R simply prints it to the console.\n\nNote, that the `=` inside the function parenthesis gives `x = 0` to the function and is separate from any `x` defined outside of the function.\nFor example:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-21_393077dfd756c8b18ce08c75c47e084b'}\n\n```{.r .cell-code}\nx <- 10\ncos(x = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n# x outside of the function is still 10\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\nTo learn more about a function in R, execute `?` with the function name or press **F1** with your mouse over the function.\nThis is actually one of the most important things to learn today, because the help pages can be... well... incredibly helpful.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-22_c4b74c802cdcb7adadd904dab2a34a7c'}\n\n```{.r .cell-code}\n?sin\n```\n:::\n\n\nWe can pass arguments by name or by order of appearance.\nThe following two expressions are equivalent.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-23_54b09705d941fae26dffe85e5ba3670a'}\n\n```{.r .cell-code}\nsin(x = 12)\nsin(12)\n```\n:::\n\n\nOther notable functions to start out with:\n\nCombine elements into a vector:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-24_808bd5709f87cb7016f0bbfea69a579b'}\n\n```{.r .cell-code}\nc(1, 3, 5, 31)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  3  5 31\n```\n:::\n:::\n\n\nConvert between datatypes with:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-25_ddfc74651793ef8c5f9442b1b086cd30'}\n\n```{.r .cell-code}\nas.numeric(\"1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nas.character(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"\n```\n:::\n:::\n\n\nCalculate summary values of a vectore:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-26_1372696c30a45dbf373bfa354bcdb361'}\n\n```{.r .cell-code}\nx <- c(1, 3, 5, 42)\nmax(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 42\n```\n:::\n\n```{.r .cell-code}\nmin(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.75\n```\n:::\n\n```{.r .cell-code}\nrange(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1 42\n```\n:::\n:::\n\n\nCreate sequences of numbers:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-27_4d565dbc9cd47668a1bbeb4635d40277'}\n\n```{.r .cell-code}\nseq(1, 10, by = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5 7 9\n```\n:::\n:::\n\n\nYou just learned about the functions `sin`, `seq` and `max`.\nBut wait, there is more!\nNot only in the sense that there are more functions in R (what kind of language would that be with only two verbs?!), but also in a more powerful way:\n\n> We can define our own functions!\n\nThe syntax ($\\leftarrow$ grammar for programming languages) is as follows.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-28_7aa0d7a192f485aa54b579a5e6afd521'}\n\n```{.r .cell-code}\nname_for_the_function <- function(parameter1, parameter2, ...) { # etc.\n  # body of the function\n  # things happen\n  result <- parameter1 + parameter2\n  # Something the function should return to the caller\n  return(result)\n}\n```\n:::\n\n\nThe function ends when it reaches the `return` keyword.\nIt also ends when it reaches the end of the function body and implicitly returns the last expression.\nSo we could have written it a bit shorter and in fact you will often see people omitting the explicit return at the end:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-29_1a2dd9c27afcbd641c3f5dbaf88f0380'}\n\n```{.r .cell-code}\nadd <- function(x, y) {\n  x + y\n}\n```\n:::\n\n\nAnd we can call our freshly defined function:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-30_7c9486477b37af6f73b21982156d69eb'}\n\n```{.r .cell-code}\nadd(23, 19)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 42\n```\n:::\n:::\n\n\nGot an error like `Error in add(23, 19) : could not find function \"add\"`?\nCheck that you did in fact execute the code that defines the function (i.e. put your cursor on the line with the `function` keyword and hit Ctrl+Enter.).\n\n## Packages: Sharing functions\n\nYou are not the only one using R.\nThere is a welcoming and helpful community out there.\nSome people also write a bunch of functions and put them together in a so called `package`.\nAnd some people even went a step further.\nThe `tidyverse` is a **collection of packages** that play very well together and also iron out some of the quirkier ways in which R works [@wickhamWelcomeTidyverse2019b].\nThey provide a consistent interface to enable us to do more while having to learn less special cases.\nThe R function `install.packages(\"<package_name_here>\")` installs packages from CRAN a curated set of R packages.\n\nThis is one exception to our effort of having everything in our script and not just in the console.\nWe don't want R trying to install the package every time we run the script, as this needs to happen only once.\nSo you can either turn it into a comment, delete it from the script, or only type it in the console.\nYou can also use RStudio's built-in panel for package installation.\n\nR packages, especially the ones we will be using, often come with great manuals and help pages and I added a link to the package website for each of the packages to the hexagonal icons for each package in the script, so make sure to **click the icons**.\n\nIf you don't have the link at hand you can also always find help on the internet.\nMost of these packages publish their source code on a site called GitHub, so you will be able to find further links, help and documentation by searching for *r* <the package> github.\nSometimes it can be helpful to write our R's full name when searching (turns out there are a lot of thing with the letter R): `rstats`.\n\n## Literate Programming with Quarto (previously Rmarkdown): Code is communication\n\n<aside><a href=\"https://rmarkdown.rstudio.com/index.html\"> ![](images/rmarkdown.png){width=\"200\"} </a></aside>\n\n<!-- TODO -->\n\n**Quarto** enables us, to combine text with `code` and then produce a range of output formats like pdf, html, word documents, presentations etc.\nIn fact, this whole website, including the slides, was created with Quarto.\nSounds exciting?\nLet's dive into it!\n\nOpen up a new Quarto document with the file extension `.qmd` from the *New File* menu in the top left corner of RStudio: **File → New File → Quarto Document** and choose **html** as the output format.\nI particularly like html, because you don't have to worry about page breaks and it easily works on screens of different sizes, like your phone.\n\nA Quarto document consists of three things:\n\n1.  **Metadata**:\\\n    Information about your document such as the author or the date in a format called `YAML`. This YAML header starts and ends with three minus signs `---`.\n2.  **Text**:\\\n    Regular text is interpreted as markdown, meaning it supports things like creating headings by prefixing a line with `#`, or text that will be bold in the output by surrounding it with `**`.\n3.  **Code chunks**:\\\n    Starting with a line with 3 backticks and {r} and ending with 3 backticks. They will be interpreted as R code. This is where you write the code like you did in the `.R` script file. You can insert new chunks with the button on the top right of the editor window or use the shortcut **Ctrl+Alt+i**.\n\nUse these to document your thoughts alongside your code when you are doing data analysis.\nFuture you (and reviewer number 2) will be happy!\nTo run code inside of chunks, use,the little play button on the chunk, the tried and true **Ctrl+Enter** to run one line, or **Ctrl+Shift+Enter** to run the whole chunk.\nYour chunks can be as large or small as you want, but try to maintain some sensible structure.\n\nThe lecture video also demonstrates the different output formats (though for the exercises we will only be using `html`) and the visual editor.\n\n![Cute little monsters as Rmarkdown Wizards by Allison Horst](images/rmarkdown_wizards.png)\n\n### The Tidyverse\n\n<aside><a href=\"https://tidyverse.org/\"> ![](images/tidyverse.png){width=\"200\"} </a></aside>\n\nGo ahead and install the tidyverse packages with\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-31_4ecfb80203e5e34aec0564357bad2f2a'}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n## Our First Dataset: The Palmer Penguins\n\n![The three penguin species of the Palmer Archipelago, by Allison Horst](images/lter_penguins.png){#fig-penguins}\n\nSo let's explore our first dataset together in a fresh Quarto document.\nThe `setup` chunk is special.\nIt gets executed automatically before any other chunk in the document is run.\nThis makes it a good place to load packages.\nThe dataset we are working with today actually comes in its own package, so we need to install this as well (Yes, there is a lot of installing today, but you will have to do this only once):\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-32_5d1aad99440b23d992850b73cab14bae'}\n\n```{.r .cell-code}\ninstall.packages(\"palmerpenguins\")\n```\n:::\n\n\nAnd then we populate our `setup` chunk with\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-33_34279de6eecf5c7e42b2864f5320fa80'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n```\n:::\n\n\nThis gives us the `penguins` dataset [@rpalmerpenguins]:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-34_5554b907451cd3e14084d30b766bd550'}\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n### Dataframes: R's powerfull tables\n\nLet's talk about the shape of the `penguins` object.\nThe `str` function reveals the **structure** of an object to us.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-35_b12152d59ab7107e1bcb531d86a15daf'}\n\n```{.r .cell-code}\nstr(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n```\n:::\n:::\n\n\nThe penguins variable contains a `tibble`, which is the tidyverse version of a `dataframe`.\nIt behaves the same way but prints out nicer.\nBoth are a list of columns, where columns are (usually) vectors.\nWe will learn more about their underlying datastructure, `list`s, [next week](data-wrangling.qmd).\n\n## The Grammar of Graphics: Translate data into visualizations\n\n<aside><a href=\"https://ggplot2.tidyverse.org/\"> ![](images/ggplot2.png){width=\"200\"} </a></aside>\n\nYou probably took this course because you want to build some cool visualizations for you data.\nIn order to do that, let us talk about how we can describe visualizations.\nJust like language has grammar, some smart people came up with a **grammar of graphics** [@wilkinsonGrammarGraphics2005], which was then slightly modified and turned into an R package so that we can not only talk about but also create visualizations using this grammar [@wickhamLayeredGrammarGraphics2010].\nThe package is called `ggplot2`, and we already have it loaded because it is included in the tidyverse.\nBefore looking at the code, we can describe what we need in order to create this graphic.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-36_6df6f832038031d39d2afbabaf0d17e0'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins %>%\n  ggplot(aes(flipper_length_mm, bill_length_mm,\n             color = species,\n             shape = sex)) +\n  geom_point(size = 2.5) +\n  geom_smooth(aes(group = species), method = \"lm\", se = FALSE,\n              show.legend = FALSE) +\n  labs(x = \"Flipper length [mm]\",\n       y = \"Bill length [mm]\",\n       title = \"Penguins!\",\n       subtitle = \"The 3 penguin species can be differentiated by their flipper- and bill-lengths.\",\n       caption = \"Datasource:\\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins:\\nPalmer Archipelago (Antarctica) penguin data.\\nR package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/\",\n       color = \"Species\",\n       shape = \"Sex\") +\n  theme_minimal() +\n  scale_color_brewer(type = \"qual\") +\n  theme(plot.caption = element_text(hjust = 0))\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-36-1.png){width=100%}\n:::\n:::\n\n\nHaving a grammar means: - we can build complex visualizations with basic building blocks that fit together according to some rules (the grammar) - just like lego bricks - we just have to learn the building blocks and not a different function for all the different types of plots (e.g. barplot, scatterplot, lineplot, piechart)\n\nWe can build this plot up step by step.\nThe data is the foundation of our plot, but this just gives us an empty plotting canvas.\nI am assigning the individual steps we are going through to a variable, so that we can sequentially add elements, but you can do this in one step as shown above.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-37_3cff86e9de066431b63e98b6bae05d37'}\n\n```{.r .cell-code}\nplt <- ggplot(penguins)\n\nplt\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-37-1.png){width=100%}\n:::\n:::\n\n\nThen, we add and `aesthetic mapping` to the plot.\nIt creates a relation from the features of our dataset (like the flipper length of each penguin) to a visual property, like position of the x-axis, color or shape.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-38_8c58d153d0b3fcf9615015434df7a2f9'}\n\n```{.r .cell-code}\nplt <- ggplot(penguins,\n              aes(x = flipper_length_mm,\n                  y = bill_length_mm,\n                  color = species,\n                  shape = sex))\n\nplt\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-38-1.png){width=100%}\n:::\n:::\n\n\nStill, the plot is empty, it only has a coordinate system with a certain scale.\nThis is because we have no geometric objects to represent our aesthetics.\nElements of the plot are added using the `+` operator and all geometric elements that ggplot knows start with `geom_`.\nLet's add some points:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-39_01c27bc4528e2b9a2a91eb4a356c8865'}\n\n```{.r .cell-code}\nplt <- plt +\n  geom_point()\n\nplt\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-39-1.png){width=100%}\n:::\n:::\n\n\nLook at the help page for `geom_point` to find out what aesthetics it understands.\nThe exact way that features are mapped to aesthetics is regulated by **scales** starting with `scale_` and the name of an aesthetic:\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-40_5ec9b3ce1a20f26f1b9178f6b38cc41f'}\n\n```{.r .cell-code}\nplt <- plt +\n  scale_color_manual(values = c(\"red\", \"blue\", \"orange\"))\n\nplt\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-40-1.png){width=100%}\n:::\n:::\n\n\nWe can add or change labels (like the x-axis-label) by adding the `labs` function.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-41_d4a1af741c532ded30c9b18465cb4045'}\n\n```{.r .cell-code}\nplt <- plt +\n    labs(x = \"Flipper length [mm]\",\n         y = \"Bill length [mm]\",\n         title = \"Penguins!\",\n         subtitle = \"The 3 penguin species can differentiated by their flipper and bill lengths\")\n```\n:::\n\n\nThe overall look of the plot is regulated by themes like the pre-made `theme_` functions or more finely regulated with the `theme()` function, which uses `element` functions to create the look of individual elements.\nAutocomplete helps us out a lot here (**Ctrl+Space**).\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-42_2e783d4b05579f8357e335b1c6a20917'}\n\n```{.r .cell-code}\nplt <- plt + \n  theme_minimal() +\n  theme(legend.text = element_text(face = \"bold\"))\n\nplt\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-42-1.png){width=100%}\n:::\n:::\n\n\nIn summary, this is what our plot needs:\n\n-   data\n-   aesthetic mapping\n-   geom(s)\n-   (stat(s))\n-   coordinate system\n-   guides\n-   scales\n-   theme\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-43_125f00fce064608433875e60d4971cd3'}\n\n```{.r .cell-code}\nmy_plot <- ggplot(penguins,\n                  aes(x = flipper_length_mm,\n                      y = bill_length_mm,\n                      shape = sex,\n                      color = species)) +\n  geom_point() +\n  scale_color_manual(values = c(\"red\", \"blue\", \"orange\")) +\n  labs(title = \"Penguins\") +\n  theme(plot.title = element_text(colour = \"purple\"))\n\nmy_plot \n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-43-1.png){width=100%}\n:::\n:::\n\n\nWe can save our plot with the `ggsave` function.\nIt also has more arguments to control the dimentions and resolution of the image.\n\n\n::: {.cell hash='intro_cache/html/unnamed-chunk-44_0ab5dce40cd0ef05fb3468c61aae6f08'}\n\n```{.r .cell-code}\nggsave(\"my_plot.png\", my_plot)\n```\n:::\n\n\nNext week we will be get rid of the annoying `NA` in the legend for `sex`.\n\n## The Community: There to catch You.\n\n![Comunity Teamwork by Allison Horst](images/code_hero.jpg){width=\"50%\"}\n\n![Googling the Error Message](images/errors.jpg){width=\"50%\"}\n\n## Bonus: Get more RStudio themes\n\n-   and talk about where packages come from\n-   <https://github.com/gadenbuie/rsthemes>\n\n## Exercises\n\nThis course is not graded, but I need some way of confirming that you did indeed take part in this course.\nIn order to get the confirmation, you will send your solutions for a minimum of 5 out of the 8 exercises to me before the Seminar Fridays.\nFor each week I would like you to create a fresh quarto document with your solutions as code as well as any questions that arose during the lecture.\nThis will help me a lot in improving this course.\n\nWhen you are done solving the exercises, hit the `knit` button (at the top of the editor panel) and send me the resulting **html** document via discord (confirm that it looks the way you expected beforehand).\n\nHere are today's tasks:\n\n### Put your flippers in the air!\n\nIn a fresh quarto document (without the example template content), load the tidyverse and the palmerpenguins packages.\n\n- Write a section of text about your previous experience with data analysis and/or programming (optional, but I can use this information to customize the course).\n- Produce a scatterplot (meaning a plot with points) of the bill length vs. the bill depth, colorcoded by species.\n    - Imaginary bonus points if you manage to use the same colors as in the [penguin-image](#fig-penguins) (hint: look at the help page for `scale_color_manual()` to find out how. Note, that R can work with it's built-in color names, `rgb()` specifications or as hex-codes such as `#1573c7`). Even more bonus points if you also look into the `theme()` function and it's arguments, or the `theme_<...>()` functions to make the plot prettier.\n-   Create a vector of all odd numbers from 1 to 99 and store it in a variable.\n    - Create a second variable that contains the squares of the first.\n    - Have a look at the `tibble` function. Remember that you can always access the help page for a function using the `?` syntax, e.g. `?tibble::tibble` (The two colons `::` specify the package a function is coming from. You only need `tibble(...)` in the code because the `tibble` package is loaded automatically with the tidyverse. Here, I specify it directly to send you to the correct help page).\n    - Create a `tibble` where the columns are the vectors `x` and `y`.\n    - Create a scatterplot (points) of the two columns using `ggplot`.\n    - What `geom_` function do you need to add to the plot to add a line that connects your points?\n- Check the metadata (YAML) of your quarto document and make sure it contains your name as the `author:` .\n\n<!-- TODO -->\n\n- Make the output document [self contained](https://quarto.org/docs/output-formats/html-basics.html#self-contained) by adding `embed-resources: true` to the yaml header.\n    - [Here](https://quarto.org/docs/reference/formats/html.html) are a couple more YAML options you can try if you feel adventurous.\n- Knit it and ship it! (=press the render button and send me the rendered html document via discord)\n\n\n::: {.callout-caution}\n- Some operating systems (looking at you, Windows), will not show you file extensions by default (e.g. `.html`, `.png`, `docx`).\n  Check out the exercise tips video below for instructions on turning those on, to make it easier for you to send the correct file (the rendered html file instead of the source qmd).\n- You can test that your file is truely self contained, by copying it to a different location on your computer and opening it (a simple double-click should suffice) with your default browser.\n  If you can see your plots, you are good to go. If you don't see them that means the plots are not embedded into the output (just linked to their relative location). Check the second-to-last point of the exercise list again.\n:::\n\n### Exercise Tips\n\n\n{{< youtube Ycl4CMJdneM >}}\n\n\n\n## Learn more:\n\nCheck out the dedicated [Resources](Resources) page.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}